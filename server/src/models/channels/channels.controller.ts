import { Body, Controller, Get, Param, Patch, Put, Session, UseGuards, ValidationPipe } from '@nestjs/common';
import { ApiOperation, ApiTags } from '@nestjs/swagger';

import { AuthGuard } from 'models/auth/guards';
import { SessionApp } from 'models/sessions/sessions.types';
import { ChannelsService } from './channels.service';
import { UpdateChannelDto } from './dto';
import { Channel } from './entities';

@ApiTags('Channels')
@Controller('channels')
export class ChannelsController {
  constructor(private readonly channelsService: ChannelsService) {}

  
  @Get()
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π. (–ü–æ —Å—É—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)" })
  async getAll() {
    return await this.channelsService.findAll()
  }

  // Get someone channel üçà
  @Get('id/:channelId')
  @ApiOperation({ summary: "–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á—å–µ–º-–ª–∏–±–æ –∫–∞–Ω–∞–ª–µ." })
  async getById(
    @Param('channelId') id: Channel['id']
  ) {
    return this.channelsService.findById(id)
  }

  // Get MY channel üêà
  @Get('me')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ú–û–ï–ú –∫–∞–Ω–∞–ª–µ." })
  async getMyChannel(
    @Session() session: SessionApp
  ) {
    return await this.channelsService.findById(session.channel.id)
  }


  @Put('me')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ú–û–ï–ú –∫–∞–Ω–∞–ª–µ." })
  async updateChannel(
    @Session() session: SessionApp,
    @Body(new ValidationPipe()) dto: UpdateChannelDto
  ) {
    return this.channelsService.updateChannel(session.channel.id, dto)
  }


  @Patch('subscribe/:channelId')
  @UseGuards(AuthGuard)
  @ApiOperation({ summary: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID." })
  async subscribe(
    @Session() session: SessionApp,
    @Param('channelId') channelId: Channel['id']
  ) {
    return this.channelsService.subscribe(session.channel.id, channelId)
  }

}
